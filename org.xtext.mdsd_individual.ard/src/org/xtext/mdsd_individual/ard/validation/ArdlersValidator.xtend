/*
 * generated by Xtext 2.17.0
 */
package org.xtext.mdsd_individual.ard.validation

import java.util.HashSet
import org.eclipse.xtext.validation.Check
import org.xtext.mdsd_individual.ard.ardlers.ArdlersPackage
import org.xtext.mdsd_individual.ard.ardlers.Component
import org.xtext.mdsd_individual.ard.ardlers.ComponentBody
import org.xtext.mdsd_individual.ard.ardlers.Node
import org.xtext.mdsd_individual.ard.ardlers.Library
import org.xtext.mdsd_individual.ard.extensions.*
import org.xtext.mdsd_individual.ard.ardlers.BoardDefinition
import org.xtext.mdsd_individual.ard.ardlers.TYPE
import org.xtext.mdsd_individual.ard.ardlers.IO

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ArdlersValidator extends AbstractArdlersValidator {
	extension LibraryExtensions = new LibraryExtensions;
	
	@Check
	def void checkPinIsNotUsed(ComponentBody body) {

		val nodeComponents = body.eContainer.eContainer.eContents.toList;

		var analogPins = new HashSet<String>();
		var digitalPins = new HashSet<String>();

		for (component : nodeComponents) {
			val type = (component as Component).properties.type;
			val pin = (component as Component).properties.pin;

			if (type == TYPE.ANALOG) {
				if (analogPins.contains(type.literal + pin)) {
					error("Pin is already in use", ArdlersPackage.eINSTANCE.componentBody_Pin)
				} else {
					analogPins.add(type.literal + pin)
				}
			}
			if (type == TYPE.DIGITAL) {
				if (digitalPins.contains(type.literal + pin)) {
					error("Pin is already in use", ArdlersPackage.eINSTANCE.componentBody_Pin)
				} else {
					digitalPins.add(type.literal + pin)
				}
			}
		}
	}
	
	@Check
	def void checkPinIsOnBoard(ComponentBody body){
		
		val libraryList =  body.eContainer.eContainer.eContainer.eContents.filter(Library);
		if(libraryList.length > 0){
			val library = libraryList.get(0);
			if(!library.boardtype.isPinPresent(body.pin, body.io, body.type)){
				error('Pin is not present on the board defined!', ArdlersPackage.eINSTANCE.componentBody_Pin)
			}			
		}
	}
	
	

	@Check
	def void checkDuplicateComponentNames(Node node) {
		
		var componentNames = new HashSet<String>();

		for (component : node.components) {
			val name = component.name;
			if (componentNames.contains(name)) {
				error("Duplicate component names", ArdlersPackage.eINSTANCE.component_Name)
			} else
				componentNames.add(name)
		}
	}
	
	@Check
	def void checkRateOnInputComponents(ComponentBody body) {
		if(body.io == IO.INPUT && body.rate === null) {
			error("Rate is required on input components", ArdlersPackage.eINSTANCE.componentBody_Rate)
		}
	}
	
}
